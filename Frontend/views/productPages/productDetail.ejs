<%- include('../partials/header') %>

<style>
  /* Add this to your CSS file */
.notification {
  position: fixed;
  top: 20px;
  right: 20px;
  min-width: 300px;
  padding: 10px;
  border-radius: 5px;
  color: white;
  z-index: 1000;
  opacity: 0; /* Start invisible */
  transition: opacity 0.5s ease, transform 0.5s ease;
}

.notification.show {
  opacity: 1; /* Fade in */
  transform: translateY(0); /* Slide down */
}

.notification.hide {
  opacity: 0; /* Fade out */
  transform: translateY(-20px); /* Slide up */
}

.success {
  background-color: #4CAF50; /* Green */
}

.error {
  background-color: #F44336; /* Red */
}

</style>

<!-- Add this to your HTML body -->
<div id="notificationContainer"></div>

<!-- Product Page -->
<div class="container mx-auto p-6">
  <!-- Product Section -->
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
    <!-- Product Image -->
    <div class="flex justify-center">
      <img
        src="/<%= product.image %>"
        alt="<%= product.title %>"
        class="w-full max-w-sm object-cover"
      />
    </div>

    <!-- Product Details -->
    <div class="flex flex-col">
      <h1 class="text-2xl font-bold"><%= product.title %></h1>
      <p class="text-gray-500 mt-2">MRP: ₹<%= product.price %></p>
      <p class="text-green-600 mt-1"><%= product.description %></p>

      <!-- Tabs -->
      <div class="mt-6">
        <!-- Tab Navigation -->
        <ul class="flex border-b">
          <li class="mr-1">
            <a
              href="#"
              class="tablink bg-white inline-block py-2 px-4 text-blue-500 font-semibold"
              data-tab="description"
              >Description</a
            >
          </li>
          <li class="mr-1">
            <a
              href="#"
              class="tablink bg-white inline-block py-2 px-4 text-gray-400 hover:text-gray-600"
              data-tab="reviews"
              >Reviews (0)</a
            >
          </li>

          <li class="mr-1">
            <a
              href="#"
              class="tablink bg-white inline-block py-2 px-4 text-gray-400 hover:text-gray-600"
              data-tab="additional-info"
              >All Reviews</a
            >
          </li>
        </ul>

        <!-- Tab Contents -->
        <div id="description" class="tabcontent p-4">
          <p class="text-gray-700">
            <%= product.description %>
            <!-- Optionally use a longer description -->
          </p>
        </div>

        <!-- All revies display here ----------------------------- -->
        <div id="additional-info" class="tabcontent p-4 hidden">
          <div id="pastReviews" >
           
            <div id="reviewsContainer" class="mt-2 ">
              <!-- Reviews will be dynamically inserted here -->
            </div>
          </div>
        </div>



        <div id="reviews" class="tabcontent p-4 hidden">
          <p class="font-medium text-gray-800">Your rating *</p>
          <div class="rating flex space-x-1 mt-2">
            <!-- Star Ratings -->
            <span
              class="star text-gray-400 cursor-pointer text-2xl"
              data-value="1"
              >&#9733;</span
            >
            <span
              class="star text-gray-400 cursor-pointer text-2xl"
              data-value="2"
              >&#9733;</span
            >
            <span
              class="star text-gray-400 cursor-pointer text-2xl"
              data-value="3"
              >&#9733;</span
            >
            <span
              class="star text-gray-400 cursor-pointer text-2xl"
              data-value="4"
              >&#9733;</span
            >
            <span
              class="star text-gray-400 cursor-pointer text-2xl"
              data-value="5"
              >&#9733;</span
            >
          </div>

          <textarea
            id="reviewText"
            class="mt-4 w-full h-24 p-2 border border-gray-300"
            placeholder="Write your review here..."
          ></textarea>
          <button
            id="submitReview"
            class="mt-2 bg-blue-500 text-white p-2 rounded"
          >
            Submit Review
          </button>
        </div>
      </div>

      <!-- ---------------------- -->
    </div>
  </div>


  <!-- Related Products -->
<div class="mt-12">
  <h2 class="text-2xl font-bold">Related products</h2>
  <div class="grid grid-cols-2 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-6 mt-6">
    <% relatedProducts.forEach(relatedProduct => { %>
    <div
      class="bg-white border rounded-lg p-4 text-center hover:shadow-lg transition-shadow border-2 border-[#CA9650]"
    >
      <img
        src="/<%= relatedProduct.image %>"
        alt="<%= relatedProduct.title %>"
        class="mx-auto w-full transition-transform duration-300 hover:scale-105"
      />
      <div class="mt-4 font-semibold"><%= relatedProduct.title %></div>
      <div class="text-gray-700 text-lg">
        MRP: ₹<%= relatedProduct.price %>
      </div>
      <a
        href="/product/<%= relatedProduct._id %>"
        class="block mt-4 text-blue-500"
        >Read more</a
      >
    </div>
    <% }) %>
  </div>
</div>

</div>

<script>
  // Tab toggle functionality -------------------------------------------
document.addEventListener('DOMContentLoaded', () => {
  const tablinks = document.querySelectorAll(".tablink");
  const tabcontents = document.querySelectorAll(".tabcontent");

  // Handle tab click and toggle content
  tablinks.forEach(link => {
    link.addEventListener("click", function (event) {
      event.preventDefault();

      // Hide all tab contents
      tabcontents.forEach(content => content.classList.add("hidden"));

      // Remove active class from all links
      tablinks.forEach(link =>
        link.classList.remove("text-blue-500", "font-semibold")
      );
      
      // Add active class to clicked link and show corresponding content
      link.classList.add("text-blue-500", "font-semibold");
      const tabId = link.getAttribute("data-tab");
      document.getElementById(tabId).classList.remove("hidden");
    });
  });
});

// Star rating functionality -------------------------------------------
const stars = document.querySelectorAll(".rating .star");
let selectedRating = 0;

// Handle star selection and change color to golden when selected
stars.forEach(star => {
  star.addEventListener("click", () => {
    // Reset all stars
    stars.forEach(s => s.classList.remove("selected", "text-yellow-400"));
    
    // Highlight the selected stars
    star.classList.add("selected", "text-yellow-400");
    selectedRating = star.getAttribute("data-value");

    // Highlight all previous stars as well
    stars.forEach(s => {
      if (s.getAttribute("data-value") <= selectedRating) {
        s.classList.add("text-yellow-400");
      }
    });
  });
});

// Submit review functionality -------------------------------------------
document.getElementById('submitReview').addEventListener('click', async () => {
  const reviewText = document.getElementById('reviewText').value;
  const selectedStar = document.querySelector('.star.selected'); // Get the selected star
  const rating = selectedStar ? selectedStar.getAttribute('data-value') : null; // Check if a star is selected
  const productId = "<%= product._id %>"; // Fetch the product ID from your template

  if (!reviewText || !rating) {
    showNotification('Please fill in both the review and the rating.', 'error');
    return;
  }

  try {
    const response = await fetch('/reviews/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        reviewText,
        rating,
        product: productId,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to submit review.');
    }

    // Clear the review text and rating after successful submission
    document.getElementById('reviewText').value = ''; // Reset review text
    document.querySelectorAll('.star').forEach(star => star.classList.remove('selected', 'text-yellow-400')); // Reset star rating

    const newReview = await response.json();
    fetchReviews(productId); // Fetch the updated reviews after submission

    showNotification('Review submitted successfully.', 'success');
  } catch (error) {
    console.error('Error submitting review:', error);
    showNotification('Failed to submit review. Please try again later.', 'error');
  }
});

// Function to show notification
function showNotification(message, type) {
  const notification = document.createElement('div');
  notification.className = `notification ${type}`;
  notification.innerText = message;

  // Append notification to container
  const container = document.getElementById('notificationContainer');
  container.appendChild(notification);

  // Show the notification
  setTimeout(() => {
    notification.classList.add('show');

    // Hide after 3 seconds
    setTimeout(() => {
      notification.classList.remove('show');
      notification.classList.add('hide');

      // Remove notification after the animation
      setTimeout(() => {
        container.removeChild(notification);
      }, 500); // Match with the duration of the CSS transition
    }, 3000); // Duration to show notification
  }, 100); // Small delay to allow DOM update
}

// Fetch and display top 3 reviews --------------------------------------
async function fetchReviews(productId) {
  try {
    const response = await fetch(`/reviews/${productId}`); // Adjust the route as necessary
    if (!response.ok) {
      throw new Error('Failed to fetch reviews.');
    }

    const reviews = await response.json(); // Parse JSON response

    // Sort reviews by createdAt in descending order (latest first)
    reviews.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    // Clear existing reviews
    const reviewsContainer = document.getElementById('reviewsContainer');
    reviewsContainer.innerHTML = '';

    // Show only the latest 3 reviews
    const latestReviews = reviews.slice(0, 3);

    // Append each review to the container
    latestReviews.forEach(review => {
      const reviewElement = document.createElement('div');
      reviewElement.classList.add('review');

      // Create the star rating display
      let starsHTML = '';
      for (let i = 1; i <= 5; i++) {
        if (i <= review.rating) {
          // Filled star (golden color)
          starsHTML += '<span class="star text-yellow-400">★</span>';
        } else {
          // Empty star (gray color)
          starsHTML += '<span class="star text-gray-400">★</span>';
        }
      }

      // Add the review HTML
      reviewElement.innerHTML = `
        <div class="stars">
          ${starsHTML}
        </div>
        <p>${review.reviewText}</p>
        <p><small>Submitted on: ${new Date(review.createdAt).toLocaleDateString()}</small></p>
      `;
      reviewsContainer.appendChild(reviewElement);
    });

  } catch (error) {
    console.error('Error fetching reviews:', error);
    alert('Failed to load reviews. Please try again later.');
  }
}

// Fetch reviews on page load -------------------------------------------
document.addEventListener('DOMContentLoaded', () => {
  fetchReviews("<%= product._id %>"); // Fetch and display reviews when the page loads
});

</script>




<%- include('../partials/footer') %>
